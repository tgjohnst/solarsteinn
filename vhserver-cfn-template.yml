# valheim-cfn-template.yml
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Creates a VPC with networking components, relevant security groups, and an EC2 instance. 
  Also creates an S3 bucket for server backups.
  WARNING: 
  You WILL be billed for the AWS resources used if you create a stack from this template.
  The following will be (purposefully) retained on stack deletion and have to be deleted manually
    1. S3 bucket
    2. Elastic IP
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: m5.large
    ConstraintDescription: must be a valid EC2 instance type.
    AllowedValues:
      - m5.large
      - m4.large
      - m3.large
      - c5.large
      - c4.large
      - c3.large
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

# RESOURCES

Resources:
# Set up the VPC and associated networking resources
# note that everything is tagged with the stack ID
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
  Subnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.0/24
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  RouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
  Route:
    Type: 'AWS::EC2::Route'
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  SubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref Subnet
      RouteTableId: !Ref RouteTable
  NetworkAcl:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
  # Some security is at the NACL, not just security group, level
  # By default, we don't need HTTP access in this network. Disable at the network level unless needed
  #   Uncomment this next block if you need to run a dashboard or something requiring port 80
  # InboundHTTPNetworkAclEntry:
    # Type: 'AWS::EC2::NetworkAclEntry'
    # Properties:
      # NetworkAclId: !Ref NetworkAcl
      # RuleNumber: '100'
      # Protocol: '6'
      # RuleAction: allow
      # Egress: 'false'
      # CidrBlock: 0.0.0.0/0
      # PortRange:
        # From: '80'
        # To: '80'
  InboundSSHNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: '101'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '22'
        To: '22'
  InboundResponsePortsNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: '102'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '1024'
        To: '65535'
  OutBoundHTTPNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: '100'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '80'
        To: '80'
  OutBoundHTTPSNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: '101'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '443'
        To: '443'
  OutBoundResponsePortsNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: '102'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '1024'
        To: '65535'
  # Associate the NACL to the subnet we created
  SubnetNetworkAclAssociation:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref Subnet
      NetworkAclId: !Ref NetworkAcl
  # Snag an elastic IP.
  IPAddress:
    Type: 'AWS::EC2::EIP'
    DependsOn: AttachGateway
    # Note: This will not be deleted on stack deletion in case you need to recreate stack and migrate the server
    # Unassociated IPs (after stack deletion) will incur a very small charge so delete this if it's no longer needed
    DeletionPolicy: Retain
    Properties:
      Domain: vpc
      InstanceId: !Ref VHServerInstance
    Tags:
      - Key: Application
        Value: !Ref 'AWS::StackId'
  InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Enable SSH access via port 22 from parameter-specified IP
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref SSHLocation
  VHInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable Web/SSH Access
      SecurityGroupIngress:
        - IpProtocol: udp
          FromPort: '2456'
          ToPort: '2458'
          CidrIp: 0.0.0.0/0
  VHServerInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      SecurityGroups:
        - !Ref WebInstanceSecurityGroup
      KeyName: !Ref KeyName
      ImageId: !FindInMap [ RegionMap, !Ref "AWS::Region", HVM64 ]
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeType: gp2
            VolumeSize: '20'
            DeleteOnTermination: 'false'
            Encrypted: 'false'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: os
          Value: awslinux
        - Key: app
          Value: valheim
        - Key: Name
          Value: VHServer
      UserData:
        Fn::Base64:
          Fn::Sub: |
            #!/bin/bash -xe
            sudo yum update -y
  # S3 bucket for backups
  S3BackupBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
    DeletionPolicy: Retain
    Tags:
      - Key: Application
        Value: !Ref 'AWS::StackId'
      - Key: Purpose
        Value: valheim-backup

Outputs:
  StackName:
    Value: !Ref "AWS::StackName"
  StackID:
    Value: !Ref "AWS::StackId"
  VHInstanceDNS:
    Value: !GetAtt VHInstance.PublicDnsName
  BucketARN:
    Value: !GetAtt S3BackupBucket:Arn
  BucketURL:
    Value: !GetAtt S3BackupBucket:DomainName


# use Amazon Linux 2 (64-bit x86)
# These can be replaced for the regions or OS types you need
 Mappings:
  RegionMap:
    us-east-1:
      HVM64: ami-032930428bf1abbff 
    us-west-2:
      HVM64: ami-01fee56b22f308154
